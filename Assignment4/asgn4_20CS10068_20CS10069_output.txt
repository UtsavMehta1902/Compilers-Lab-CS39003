identifier-opt => identifier
constant => integer-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
constant-expr => conditional-expr
enumerator => enumeration-constant = constant-expr
enumerator-list => enumerator
enumerator => enumeration-constant
enumerator-list => enumerator-list , enumerator
enumerator => enumeration-constant
enumerator-list => enumerator-list , enumerator
enumerator => enumeration-constant
enumerator-list => enumerator-list , enumerator
enumerator => enumeration-constant
enumerator-list => enumerator-list , enumerator
enumerator => enumeration-constant
enumerator-list => enumerator-list , enumerator
enumerator => enumeration-constant
enumerator-list => enumerator-list , enumerator
enumerator => enumeration-constant
enumerator-list => enumerator-list , enumerator
enumerator => enumeration-constant
enumerator-list => enumerator-list , enumerator
enumerator => enumeration-constant
enumerator-list => enumerator-list , enumerator
enumerator => enumeration-constant
enumerator-list => enumerator-list , enumerator
enumerator => enumeration-constant
enumerator-list => enumerator-list , enumerator
enum-specifier => enum identifier-opt { enumerator-list }
type-specifier => enum-specifier
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
init-declarator-list-opt => epsilon
declaration => declaration-specifiers init-declarator-list-opt ;
external-declaration => declaration
translation-unit => external-declaration
type-specifier => void
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
identifier-list-opt => epsilon
direct-declarator => direct_declarator ( identifier-list-opt )
declarator => pointer-opt direct-declarator
declaration-list-opt => epsilon
primary-expr => identifier
postfix-expr => primary-expr
primary-expr => string-literal
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
argument-expr-list => assignment-expr
argument-expr-list-opt => argument-expr-list
postfix-expr => postfix-expr ( argument-expr-list-opt )
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item
block-item-list-opt => block-item-list
compound-statement => { block-item-list-opt }
function-definition => declaration-specifiers declarator declaration-list-opt compound-statement
external-declaration => function-definition
translation-unit => translation-unit external-declaration
storage-class-specifier => auto
declaration-specifiers-opt => epsilon
declaration-specifiers => storage-class-specifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
declarator => pointer-opt direct-declarator
constant => integer-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
initializer => assignment-expr
init-declarator => declarator = initializer
init-declarator-list => init-declarator
init-declarator-list-opt => init-declarator-list
declaration => declaration-specifiers init-declarator-list-opt ;
external-declaration => declaration
translation-unit => translation-unit external-declaration
type-qualifier => volatile
type-specifier => int
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
declaration-specifiers-opt => declaration-specifiers
declaration-specifiers => type-qualifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
declarator => pointer-opt direct-declarator
constant => integer-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
initializer => assignment-expr
init-declarator => declarator = initializer
init-declarator-list => init-declarator
init-declarator-list-opt => init-declarator-list
declaration => declaration-specifiers init-declarator-list-opt ;
external-declaration => declaration
translation-unit => translation-unit external-declaration
type-qualifier => const
storage-class-specifier => static
type-specifier => int
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
declaration-specifiers-opt => declaration-specifiers
declaration-specifiers => storage-class-specifier declaration-specifiers-opt
declaration-specifiers-opt => declaration-specifiers
declaration-specifiers => type-qualifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
declarator => pointer-opt direct-declarator
constant => integer-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
initializer => assignment-expr
init-declarator => declarator = initializer
init-declarator-list => init-declarator
init-declarator-list-opt => init-declarator-list
declaration => declaration-specifiers init-declarator-list-opt ;
external-declaration => declaration
translation-unit => translation-unit external-declaration
storage-class-specifier => extern
type-specifier => unsigned
type-specifier => short
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
declaration-specifiers-opt => declaration-specifiers
declaration-specifiers => type-specifier declaration-specifiers-opt
declaration-specifiers-opt => declaration-specifiers
declaration-specifiers => storage-class-specifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
declarator => pointer-opt direct-declarator
constant => integer-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
initializer => assignment-expr
init-declarator => declarator = initializer
init-declarator-list => init-declarator
init-declarator-list-opt => init-declarator-list
declaration => declaration-specifiers init-declarator-list-opt ;
external-declaration => declaration
translation-unit => translation-unit external-declaration
function-specifier => inline
type-specifier => double
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
declaration-specifiers-opt => declaration-specifiers
declaration-specifiers => function-specifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
type-specifier => int
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
declarator => pointer-opt direct-declarator
parameter-declaration => declaration-specifiers declarator
parameter-list => parameter-declaration
parameter-type-list => parameter-list
direct-declarator => direct_declarator ( parameter-type-list )
declarator => pointer-opt direct-declarator
declaration-list-opt => epsilon
type-specifier => double
specifier-qualifier-list-opt => epsilon
specifier-qualifier-list => type-specifier specifier-qualifier-list-opt
type-name => specifier-qualifier-list
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
cast-expr => ( type-name ) cast-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
expr => assignment-expr
expr-opt => expr
jump-statement => return expr-opt ;
statement => jump-statement
block-item => statement
block-item-list => block-item
block-item-list-opt => block-item-list
compound-statement => { block-item-list-opt }
function-definition => declaration-specifiers declarator declaration-list-opt compound-statement
external-declaration => function-definition
translation-unit => translation-unit external-declaration
type-specifier => int
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
identifier-list-opt => epsilon
direct-declarator => direct_declarator ( identifier-list-opt )
declarator => pointer-opt direct-declarator
declaration-list-opt => epsilon
type-specifier => short
type-specifier => signed
type-specifier => int
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
declaration-specifiers-opt => declaration-specifiers
declaration-specifiers => type-specifier declaration-specifiers-opt
declaration-specifiers-opt => declaration-specifiers
declaration-specifiers => type-specifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
declarator => pointer-opt direct-declarator
constant => integer-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
initializer => assignment-expr
init-declarator => declarator = initializer
init-declarator-list => init-declarator
init-declarator-list-opt => init-declarator-list
declaration => declaration-specifiers init-declarator-list-opt ;
block-item => declaration
block-item-list => block-item
enum-specifier => enum identifier
type-specifier => enum-specifier
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
declarator => pointer-opt direct-declarator
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
initializer => assignment-expr
init-declarator => declarator = initializer
init-declarator-list => init-declarator
init-declarator-list-opt => init-declarator-list
declaration => declaration-specifiers init-declarator-list-opt ;
block-item => declaration
block-item-list => block-item-list block-item
type-specifier => _Bool
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
declarator => pointer-opt direct-declarator
constant => integer-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
initializer => assignment-expr
init-declarator => declarator = initializer
init-declarator-list => init-declarator
init-declarator-list-opt => init-declarator-list
declaration => declaration-specifiers init-declarator-list-opt ;
block-item => declaration
block-item-list => block-item-list block-item
type-qualifier => volatile
type-specifier => int
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
declaration-specifiers-opt => declaration-specifiers
declaration-specifiers => type-qualifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
declarator => pointer-opt direct-declarator
constant => integer-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
initializer => assignment-expr
init-declarator => declarator = initializer
init-declarator-list => init-declarator
init-declarator-list-opt => init-declarator-list
declaration => declaration-specifiers init-declarator-list-opt ;
block-item => declaration
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
postfix-expr => postfix-expr --
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
expr => assignment-expr
type-specifier => int
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
declarator => pointer-opt direct-declarator
constant => integer-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
initializer => assignment-expr
init-declarator => declarator = initializer
init-declarator-list => init-declarator
init-declarator-list-opt => init-declarator-list
declaration => declaration-specifiers init-declarator-list-opt ;
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
constant => integer-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => relational-expr < shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
expr => assignment-expr
expr-opt => expr
primary-expr => identifier
postfix-expr => primary-expr
postfix-expr => postfix-expr ++
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
expr => assignment-expr
expr-opt => expr
jump-statement => continue ;
statement => jump-statement
block-item => statement
block-item-list => block-item
block-item-list-opt => block-item-list
compound-statement => { block-item-list-opt }
statement => compound-statement
iteration-statement => for ( declaration expr-opt ; expr-opt ) statement
statement => iteration-statement
block-item => statement
block-item-list => block-item
block-item-list-opt => block-item-list
compound-statement => { block-item-list-opt }
statement => compound-statement
iteration-statement => while ( expr ) statement
statement => iteration-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
expr => assignment-expr
constant => integer-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
constant-expr => conditional-expr
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => =
constant => integer-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
labeled-statement => case constant-expr : statement
statement => labeled-statement
block-item => statement
block-item-list => block-item
jump-statement => break ;
statement => jump-statement
block-item => statement
block-item-list => block-item-list block-item
jump-statement => break ;
statement => jump-statement
labeled-statement => default : statement
statement => labeled-statement
block-item => statement
block-item-list => block-item-list block-item
block-item-list-opt => block-item-list
compound-statement => { block-item-list-opt }
statement => compound-statement
selection-statement => switch ( expr ) statement
statement => selection-statement
block-item => statement
block-item-list => block-item-list block-item
type-specifier => char
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
type-qualifier-list-opt => epsilon
constant => integer-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr-opt => assignment-expr
direct-declarator => direct_declarator [ type-qualifier-list-opt assignment-expr-opt ]
declarator => pointer-opt direct-declarator
primary-expr => string-literal
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
initializer => assignment-expr
init-declarator => declarator = initializer
init-declarator-list => init-declarator
init-declarator-list-opt => init-declarator-list
declaration => declaration-specifiers init-declarator-list-opt ;
block-item => declaration
block-item-list => block-item-list block-item
type-specifier => char
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
type-qualifier-list-opt => epsilon
assignment-expr-opt => epsilon
direct-declarator => direct_declarator [ type-qualifier-list-opt assignment-expr-opt ]
declarator => pointer-opt direct-declarator
primary-expr => string-literal
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
initializer => assignment-expr
init-declarator => declarator = initializer
init-declarator-list => init-declarator
init-declarator-list-opt => init-declarator-list
declaration => declaration-specifiers init-declarator-list-opt ;
block-item => declaration
block-item-list => block-item-list block-item
type-specifier => float
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
declarator => pointer-opt direct-declarator
constant => floating-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
initializer => assignment-expr
init-declarator => declarator = initializer
init-declarator-list => init-declarator
init-declarator-list-opt => init-declarator-list
declaration => declaration-specifiers init-declarator-list-opt ;
block-item => declaration
block-item-list => block-item-list block-item
type-specifier => float
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
declarator => pointer-opt direct-declarator
constant => floating-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
initializer => assignment-expr
init-declarator => declarator = initializer
init-declarator-list => init-declarator
init-declarator-list-opt => init-declarator-list
declaration => declaration-specifiers init-declarator-list-opt ;
block-item => declaration
block-item-list => block-item-list block-item
type-specifier => float
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
declarator => pointer-opt direct-declarator
constant => floating-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
initializer => assignment-expr
init-declarator => declarator = initializer
init-declarator-list => init-declarator
init-declarator-list-opt => init-declarator-list
declaration => declaration-specifiers init-declarator-list-opt ;
block-item => declaration
block-item-list => block-item-list block-item
type-specifier => float
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
declarator => pointer-opt direct-declarator
constant => floating-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
initializer => assignment-expr
init-declarator => declarator = initializer
init-declarator-list => init-declarator
init-declarator-list-opt => init-declarator-list
declaration => declaration-specifiers init-declarator-list-opt ;
block-item => declaration
block-item-list => block-item-list block-item
type-specifier => char
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
declarator => pointer-opt direct-declarator
constant => char-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
initializer => assignment-expr
init-declarator => declarator = initializer
init-declarator-list => init-declarator
init-declarator-list-opt => init-declarator-list
declaration => declaration-specifiers init-declarator-list-opt ;
block-item => declaration
block-item-list => block-item-list block-item
type-specifier => int
declaration-specifiers-opt => epsilon
declaration-specifiers => type-specifier declaration-specifiers-opt
pointer-opt => epsilon
direct-declarator => identifier
declarator => pointer-opt direct-declarator
constant => integer-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
initializer => assignment-expr
init-declarator => declarator = initializer
init-declarator-list => init-declarator
pointer-opt => epsilon
direct-declarator => identifier
declarator => pointer-opt direct-declarator
constant => integer-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
initializer => assignment-expr
init-declarator => declarator = initializer
init-declarator-list => init-declarator-list , init-declarator
init-declarator-list-opt => init-declarator-list
declaration => declaration-specifiers init-declarator-list-opt ;
block-item => declaration
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
postfix-expr => postfix-expr ++
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
postfix-expr => postfix-expr --
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => =
unary-operator => ~
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
unary-operator => cast-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => =
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => multiplicative-expr / cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => =
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => multiplicative-expr % cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => /=
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => %=
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => =
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => exclusive-OR-expr ^ AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => =
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => inclusive-OR-expr | exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => =
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => multiplicative-expr * cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => =
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => additive-expr + multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => =
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => additive-expr - multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => =
unary-operator => !
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
unary-operator => cast-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => |=
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => =
constant => integer-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => expr , assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => =
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => logical-AND-expr && inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
expr => assignment-expr
primary-expr => ( expr )
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
expr => assignment-expr
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
conditional-expr => logical-OR-expr ? expr : conditional-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => *=
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => &=
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => ^=
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => +=
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => -=
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => <<=
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => >>=
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => =
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => shift-expr << additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => =
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => shift-expr >> additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => =
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => AND-expr & equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item-list block-item
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
constant => integer-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => relational-expr < shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
expr => assignment-expr
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => *=
unary-operator => -
constant => integer-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
unary-operator => cast-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item
block-item-list-opt => block-item-list
compound-statement => { block-item-list-opt }
statement => compound-statement
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
assignment-operator => =
constant => integer-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
primary-expr => identifier
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => multiplicative-expr * cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
assignment-expr => unary-expr assignment-operator assignment-expr
expr => assignment-expr
expr-opt => expr
expr-statement => expr-opt ;
statement => expr-statement
block-item => statement
block-item-list => block-item
block-item-list-opt => block-item-list
compound-statement => { block-item-list-opt }
statement => compound-statement
selection-statement => if ( expr ) statement else statement
statement => selection-statement
block-item => statement
block-item-list => block-item-list block-item
constant => integer-constant
primary-expr => constant
postfix-expr => primary-expr
unary-expr => postfix-expr
cast-expr => unary-expr
multiplicative-expr => cast-expr
additive-expr => multiplicative-expr
shift-expr => additive-expr
relational-expr => shift-expr
equality-expr => relational-expr
AND-expr => equality-expr
exclusive-OR-expr => AND-expr
inclusive-OR-expr => exclusive-OR-expr
logical-AND-expr => inclusive-OR-expr
logical-OR-expr => logical-AND-expr
conditional-expr => logical-OR-expr
assignment-expr => conditional-expr
expr => assignment-expr
expr-opt => expr
jump-statement => return expr-opt ;
statement => jump-statement
block-item => statement
block-item-list => block-item-list block-item
block-item-list-opt => block-item-list
compound-statement => { block-item-list-opt }
function-definition => declaration-specifiers declarator declaration-list-opt compound-statement
external-declaration => function-definition
translation-unit => translation-unit external-declaration
